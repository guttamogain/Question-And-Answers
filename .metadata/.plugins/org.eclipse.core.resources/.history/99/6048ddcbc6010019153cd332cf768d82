
package com.jegan.authservice.controller;

import java.util.Map;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.jegan.authservice.model.User;
import com.jegan.authservice.services.SecurityTokenGenerator;
import com.jegan.authservice.services.UserService;

@RestController
@CrossOrigin(origins = "http://localhost:4201")
@RequestMapping("/api/v1/userservice")
public class UserController {

	@Autowired
	private SecurityTokenGenerator tokenGenerator;

	@Autowired
	private UserService userService;

	@PostMapping("/login")
	public ResponseEntity<?> loginUser(@RequestBody User loginDetail) {
		try {
			String email = loginDetail.getEmail();
			String password = loginDetail.getPassword();
			if ((email == null) || (password == null)) {
				return new ResponseEntity<String>("{ \"message\": \"" + "Email or password cannot be empty" + "\"}",
						HttpStatus.CONFLICT);
			}
			User user = userService.findByEmailAndPassword(email, password);
			Map<String, String> map = tokenGenerator.generateToken(user);
			return new ResponseEntity<Map<String, String>>(map, HttpStatus.OK);
		} catch (Exception e) {
			return new ResponseEntity<String>("{ \"message\": \"" + e.getMessage() + "\"}", HttpStatus.UNAUTHORIZED);
		}

	}

	@PostMapping("/register")
	public ResponseEntity<?> registerUser(@RequestBody User user) {
		try {
			String email = user.getEmail();
			String password = user.getPassword();
			String firstName = user.getFirstName();
			String lastName = user.getLastName();
			if ((email == null) || (password == null) || (firstName == null) || (lastName == null)) {
				return new ResponseEntity<Object>("All Fields are mandatory, nothing can be empty", HttpStatus.CONFLICT);
			}

			userService.saveUser(user);
			return new ResponseEntity<Object>("User registered successfully", HttpStatus.CREATED);
		} catch (Exception e) {
			return new ResponseEntity<Object>(e.getMessage(), HttpStatus.CONFLICT);
		}
	}

}
