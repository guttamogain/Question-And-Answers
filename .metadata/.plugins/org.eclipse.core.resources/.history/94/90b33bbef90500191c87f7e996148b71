package com.stackroute.qnatest.service;

import static org.junit.Assert.assertNotNull;
import static org.junit.Assert.assertTrue;
import static org.mockito.Mockito.when;

import java.util.ArrayList;
import java.util.List;

import org.junit.Before;
import org.junit.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;

import com.stackroute.exception.QnaException;
import com.stackroute.qna.model.CommentsModel;
import com.stackroute.qna.model.QuestionModel;
import com.stackroute.qna.model.TopicModel;
import com.stackroute.qna.repository.CommentsRepository;
import com.stackroute.qna.repository.QuestionRepository;
import com.stackroute.qna.repository.TopicRepository;
import com.stackroute.qna.services.QnaServiceImpl;


public class QnaServiceTest {
	
	private TopicModel topic;
	
	private CommentsModel comments;
	
	private QuestionModel questions;
	
	@Mock
	private CommentsRepository commentsRepository;
	
	@Mock
	private TopicRepository topicRepository;
	
	@Mock
	private QuestionRepository questionRepository;
	
	@InjectMocks
	private QnaServiceImpl qnaServiceImpl;

	@Before
	public void setUp() {
		MockitoAnnotations.initMocks(this);
		topic = new TopicModel(0, "Jhon123",2,1);
		comments = new CommentsModel(1,"asd",1);
		questions = new QuestionModel(1,"ewr",1);
	}
	
	@Test
	public void saveTopicDetailsTest() {
		List<TopicModel> value = new ArrayList<>();
		value.add(topic);
		when(topicRepository.findAll()).thenReturn(value);
		List<TopicModel> topics= qnaServiceImpl.saveTopicDetails(topic);
		assertNotNull(topics);
	}
	
	@Test
	public void saveQuestionsTest() throws QnaException {
		List<TopicModel> value = new ArrayList<>();
		topic.setTopicId(1);
		List<QuestionModel> question = new ArrayList<>();
		question.add(questions);
		topic.setQuestions(question);
		value.add(topic);
		when(topicRepository.findAll()).thenReturn(value);
		boolean topics= qnaServiceImpl.saveQuestions(topic);
		assertTrue(topics);
	}
	
	@Test
	public void saveCommentsTest() throws QnaException {
		List<TopicModel> value = new ArrayList<>();
		topic.setTopicId(1);
		List<QuestionModel> question = new ArrayList<>();
		List<CommentsModel> comment = new ArrayList<>();
		comment.add(comments);
		questions.setComments(comment);
		question.add(questions);
		topic.setQuestions(question);
		value.add(topic);
		when(topicRepository.findAll()).thenReturn(value);
		List<TopicModel> topics= qnaServiceImpl.saveComments(topic);
		assertNotNull(topics);
	}
}
